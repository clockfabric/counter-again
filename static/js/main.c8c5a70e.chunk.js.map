{"version":3,"sources":["components/Counter.js","components/Counters.js","App.js","serviceWorker.js","index.js"],"names":["Counter","props","id","count","countValue","handleIncrement","handleDecrement","removeCounter","react_default","a","createElement","Fragment","className","onClick","style","fontSize","fontWeight","Counters","_useState","useState","_useState2","Object","slicedToArray","counters","setCounters","newCounters","toConsumableArray","forEach","counter","handleRemoveCounter","idx","findIndex","splice","updateNumberOfCounters","length","concat","uuidv4","map","key","components_Counter","App","numberOfCounters","setNumberOfCounters","components_Counters","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c8c5a70e.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Counter = props => {\r\n\tconst {\r\n\t\tid,\r\n\t\tcountValue: count,\r\n\t\thandleIncrement,\r\n\t\thandleDecrement,\r\n\t\tremoveCounter\r\n\t} = props;\r\n\r\n\tconst formatCount = () => {\r\n\t\treturn count === 0 ? \"Zero\" : count;\r\n\t};\r\n\r\n\tconst renderBadgeStyle = () => {\r\n\t\tlet classes = \"badge m-2 \";\r\n\t\treturn (classes += count === 0 ? \"badge-warning\" : \"badge-primary\");\r\n\t};\r\n\r\n\tconst styles = {\r\n\t\tfontSize: 14,\r\n\t\tfontWeight: \"bold\"\r\n\t};\r\n\r\n\treturn (\r\n\t\t<React.Fragment>\r\n\t\t\t<button\r\n\t\t\t\tclassName='btn btn-primary'\r\n\t\t\t\tonClick={() => handleDecrement(id)}>\r\n\t\t\t\tDecrement\r\n\t\t\t</button>\r\n\t\t\t<span style={styles} className={renderBadgeStyle()}>\r\n\t\t\t\t{formatCount()}\r\n\t\t\t</span>\r\n\t\t\t<button\r\n\t\t\t\tclassName='btn btn-primary'\r\n\t\t\t\tonClick={() => handleIncrement(id)}>\r\n\t\t\t\tIncrement\r\n\t\t\t</button>\r\n\t\t\t<button\r\n\t\t\t\tclassName='btn btn-outline-danger ml-4'\r\n\t\t\t\tonClick={() => removeCounter(id)}>\r\n\t\t\t\tRemove Counter\r\n\t\t\t</button>\r\n\t\t</React.Fragment>\r\n\t);\r\n};\r\n\r\nexport default Counter;\r\n","import React, { useState } from \"react\";\r\nimport Counter from \"./Counter\";\r\nimport uuidv4 from \"uuid/v4\";\r\n\r\nconst Counters = props => {\r\n\tconst [counters, setCounters] = useState([]);\r\n\r\n\tconst addCounter = () => {\r\n\t\tsetCounters([...counters, { id: uuidv4(), count: 0 }]);\r\n\t\tprops.updateNumberOfCounters(counters.length + 1);\r\n\t};\r\n\r\n\tconst handleIncrement = id => {\r\n\t\tconst newCounters = [...counters];\r\n\t\tnewCounters.forEach(counter => {\r\n\t\t\tif (counter.id === id) {\r\n\t\t\t\tcounter.count += 1;\r\n\t\t\t}\r\n\t\t});\r\n\t\tsetCounters(newCounters);\r\n\t};\r\n\r\n\tconst handleDecrement = id => {\r\n\t\tconst newCounters = [...counters];\r\n\t\tnewCounters.forEach(counter => {\r\n\t\t\tif (counter.id === id && counter.count !== 0) {\r\n\t\t\t\tcounter.count -= 1;\r\n\t\t\t}\r\n\t\t});\r\n\t\tsetCounters(newCounters);\r\n\t};\r\n\r\n\tconst handleRemoveCounter = id => {\r\n\t\tconst newCounters = [...counters];\r\n\t\tconst idx = newCounters.findIndex(counter => counter.id === id);\r\n\t\tnewCounters.splice(idx, 1);\r\n\t\tsetCounters(newCounters);\r\n\t\tprops.updateNumberOfCounters(counters.length - 1);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<React.Fragment>\r\n\t\t\t<button\r\n\t\t\t\tonClick={addCounter}\r\n\t\t\t\tclassName='btn btn-primary btn-block mb-5'>\r\n\t\t\t\tAdd Counter\r\n\t\t\t</button>\r\n\t\t\t{counters.map(counter => (\r\n\t\t\t\t<div key={counter.id} className='m-2'>\r\n\t\t\t\t\t<Counter\r\n\t\t\t\t\t\tid={counter.id}\r\n\t\t\t\t\t\tcountValue={counter.count}\r\n\t\t\t\t\t\thandleIncrement={handleIncrement}\r\n\t\t\t\t\t\thandleDecrement={handleDecrement}\r\n\t\t\t\t\t\tremoveCounter={handleRemoveCounter}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<br />\r\n\t\t\t\t</div>\r\n\t\t\t))}\r\n\t\t</React.Fragment>\r\n\t);\r\n};\r\n\r\nexport default Counters;\r\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Counters from \"./components/Counters\";\n\nfunction App() {\n\tconst [numberOfCounters, setNumberOfCounters] = useState(0);\n\n\tconst updateNumberOfCounters = count => {\n\t\tsetNumberOfCounters(count);\n\t};\n\n\treturn (\n\t\t<div className='App'>\n\t\t\t<h1 className='m-5'>Number of counters: {numberOfCounters}</h1>\n\t\t\t<Counters updateNumberOfCounters={updateNumberOfCounters} />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}